# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bsTSqsoQi87yodNDpqOkDVWL6RfVHdmK
"""

import pandas as pd
import streamlit as st
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB
from sklearn.preprocessing import LabelEncoder
from io import BytesIO

# --- CONFIGURACI√ìN DE LA APP ---
st.set_page_config(page_title="Verificador de Medicamentos", layout="centered")
st.title("üîé Verificador de Medicamentos Veterinarios")
st.markdown("Consulta estado, uso probable y detalles clave de un producto registrado por ICA.")

# --- CARGAR DATOS DESDE GOOGLE SHEETS ---
sheet_id = '1_2hRJrGAkGK3m0svwwhlZEH5RpdbIpN5E_li7fLgcDI'
gid = '1785867403'
csv_url = f'https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid={gid}'

try:
    df = pd.read_csv(csv_url, header=None)
    df.columns = df.iloc[1]
    df = df.iloc[2:].reset_index(drop=True)
    df = df[['REG ICA', 'NOMBRE', 'ESTADO', 'ESPECIES', 'IMPORTADOR', 'TITULAR']]
    df.dropna(subset=['NOMBRE', 'ESTADO'], inplace=True)
except Exception as e:
    st.error(f"‚ùå Error al cargar la base de datos: {e}")
    st.stop()

# --- MODELOS ENTRENADOS ---
# Filter data for 'VIGENTE' and 'CANCELADO' states before training
df_filtered_estado = df[df['ESTADO'].str.contains("VIGENTE|CANCELADO", case=False, na=False)].copy()

# Estado: Activo o Cancelado
tfidf_estado = TfidfVectorizer()
X_estado = tfidf_estado.fit_transform(df_filtered_estado['NOMBRE'].astype(str))
# True if 'VIGENTE' in estado, False if 'CANCELADO'
y_estado = df_filtered_estado['ESTADO'].apply(lambda x: True if "VIGENTE" in str(x).upper() else False)
modelo_estado = LogisticRegression().fit(X_estado, y_estado)


# Especie probable
tfidf_especie = TfidfVectorizer()
X_especie = tfidf_especie.fit_transform(df['NOMBRE'].astype(str))
le_especie = LabelEncoder()
y_especie = le_especie.fit_transform(df['ESPECIES'].astype(str))
modelo_especie = MultinomialNB().fit(X_especie, y_especie)

# Clasificaci√≥n tipo de producto
def clasificar_tipo(nombre):
    nombre = nombre.upper()
    if "VACUNA" in nombre:
        return "Vacuna"
    elif "ANTIBIOTICO" in nombre:
        return "Antibi√≥tico"
    elif "VITAMINA" in nombre:
        return "Vitamina"
    else:
        return "Otro"

# --- ENTRADA DEL USUARIO ---
nombre_input = st.text_input("Nombre del producto veterinario", placeholder="Ej: SUANOVIL, VACUNA AFTOSA...")

resultado_filtrado = pd.DataFrame()

if st.button("üîç Verificar"):
    if nombre_input.strip() == "":
        st.warning("‚ö†Ô∏è Por favor ingresa un nombre v√°lido.")
    else:
        # Predicci√≥n estado
        vec_estado = tfidf_estado.transform([nombre_input])
        pred_estado = modelo_estado.predict(vec_estado)[0]
        estado_texto = "‚úÖ ACTIVO" if pred_estado == True else "üö´ CANCELADO"

        # Tipo estimado
        tipo_producto = clasificar_tipo(nombre_input)

        # Especie estimada
        vec_especie = tfidf_especie.transform([nombre_input])
        pred_especie = le_especie.inverse_transform(modelo_especie.predict(vec_especie))[0]

        # Buscar en base
        resultado = df[df['NOMBRE'].str.contains(nombre_input, case=False, na=False)]
        resultado_filtrado = resultado.copy()

        # Mostrar
        st.success(f"**Estado estimado:** {estado_texto}")
        st.info(f"**Tipo de producto:** {tipo_producto}")
        st.info(f"**Especie probable:** {pred_especie}")

        if not resultado.empty:
            st.markdown("---")
            st.subheader("üìÑ Informaci√≥n registrada")
            for _, row in resultado.iterrows():
                st.markdown(f"**REG ICA:** {row['REG ICA']}")
                st.markdown(f"**Nombre:** {row['NOMBRE']}")
                st.markdown(f"**Importador:** {row['IMPORTADOR']}")
                st.markdown(f"**Titular / Distribuidor:** {row['TITULAR']}")
                st.markdown(f"**Estado oficial:** {row['ESTADO']}")
                st.markdown(f"**Especie registrada:** {row['ESPECIES']}")
                st.markdown("---")
        else:
            st.warning("‚ùå Producto no encontrado en la base de datos oficial.")

# --- DESCARGAR RESULTADOS ---
if not resultado_filtrado.empty:
    buffer = BytesIO()
    resultado_filtrado.to_excel(buffer, index=False)
    buffer.seek(0)
    st.download_button(
        label="üì• Descargar resultados en Excel",
        data=buffer,
        file_name="consulta_medicamento.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

# --- PIE DE P√ÅGINA ---
st.markdown("""
---
üìå Fuente: Base oficial de medicamentos ICA (03 de junio 2025).
Desarrollado para veterinarios y distribuidores de agroinsumos.
""")

!pip install streamlit

print(y_estado.value_counts())

!streamlit run /content/YOUR_NOTEBOOK_NAME.ipynb

!streamlit run app.py

"""# Task
Explain how to put the Streamlit code on GitHub.

## Create a github repository

### Subtask:
Guide the user on how to create a new repository on GitHub.

**Reasoning**:
Provide instructions on how to create a new repository on GitHub.
"""

print("Here are the steps to create a new repository on GitHub:")
print("1. Go to the GitHub website (github.com) and log in to your account.")
print("2. In the upper-right corner of any page, click the '+' icon, and then select 'New repository'.")
print("3. Under 'Repository name', type a name for your project.")
print("4. Optionally, add a description of your repository.")
print("5. Choose a repository visibility: 'Public' or 'Private'.")
print("6. Do not initialize the repository with a README, .gitignore, or license at this stage.")
print("7. Click the 'Create repository' button.")
